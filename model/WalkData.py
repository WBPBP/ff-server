import random
import numpy as np
import networkx as nx
import math

def calculateDistance(x1, y1, x2, y2):
    d1 = x2 - x1;
    d2 = y2 - y1;
    return math.sqrt((d1**2)+(d2**2))

# 각 데이터들을 저장해놓은 파일입니다. 현재는 데이터가 없어서 생성자에 랜덤으로 설정해 놓은 것입니다.
class normalGait:
    __left=[]
    __right=[]
    __graph_node_l = []
    __graph_node_r = []

    def __init__(self):
        self.__left = [0.00, 0.28, 0.05, 0.33, 0.19, 0.40, 0.35, 2.81, 5.02, 5.56, 6.12, 5.74, 0.00, 0.40, 0.21, 0.51, 0.30, 1.60, 0.93, 6.07, 9.65, 10.07,	10.88, 10.47, 0.00, 0.79, 0.53,
                       1.02, 0.91, 2.95, 2.28, 8.47, 11.28, 11.49, 12.02, 11.98, 0.00, 2.49, 1.79, 2.84, 1.70, 4.28, 4.58, 10.19, 11.42, 11.05, 11.37, 11.77, 0.00, 6.19, 5.14, 6.35, 3.47, 5.72, 6.74, 10.63, 8.84, 7.84, 7.09, 8.63, 0.00, 9.26, 7.84, 9.12, 4.72, 6.00, 6.81, 9.60, 5.12, 3.79, 3.35, 4.70, 0.00,
                       11.35, 8.91, 10.95, 5.51, 5.74, 4.98, 7.12, 2.05, 1.51, 1.44, 1.88, 0.00, 11.86,
                       5.09, 10.23, 4.98, 4.88, 1.56, 2.84, 0.74, 0.60, 0.58, 0.70, 0.00, 9.74, 0.51, 6.44, 2.91, 3.02, 0.26, 0.42, 0.26, 0.23, 0.21, 0.28, 0.16, 3.35, 0.00, 0.98, 0.88, 0.77, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00]
        self.__right = [0.05, 0.00, 0.00, 0.00, 0.00, 0.05, 0.00, 1.33, 1.67, 1.98, 1.95, 2.07, 0.05, 0.00, 0.00, 0.00, 0.02, 0.79, 0.07, 2.93, 4.44, 4.72, 4.74, 4.74, 0.16, 0.00, 0.00, 0.05, 0.49, 2.77, 1.16, 5.63, 8.14, 8.49, 8.49, 8.49, 0.53, 0.00, 0.37, 0.49, 1.60, 4.93, 2.77, 7.91, 11.60, 12.19, 12.19, 11.93, 2.53, 0.00, 3.00, 2.98, 4.00, 7.16, 4.42, 8.93, 11.05, 11.05, 10.84, 11.07, 5.98, 0.00, 7.42, 6.67, 6.58, 7.56, 3.79, 6.79, 6.63, 6.37, 6.12, 6.63, 9.21, 0.00, 11.02, 9.44, 7.74, 6.58, 1.77, 3.02, 2.21, 2.12, 2.00, 2.12, 10.40, 0.00, 11.56, 9.05, 7.16, 4.91, 0.72, 1.07, 0.65, 0.63, 0.47, 0.53, 9.07, 0.00, 8.42, 5.88, 5.14, 2.74, 0.35, 0.58, 0.05, 0.02, 0.00, 0.02, 4.42, 0.00, 3.40, 2.09, 2.05, 0.84, 0.07, 0.19, 0.00, 0.00, 0.00, 0.02]
        self.__graph_node_l = [9, 7, 6, 6, 6, 5, 5, 4, 3, 2, 2, 2]
        self.__graph_node_r = [7, 0, 7, 6, 6, 5, 4, 4, 3, 3, 3, 3]

    def getLeft(self):
        self.__left = np.asarray(self.__left).reshape(10, -1)
        self.__left = self.__left.T
        self.__left = self.__left.tolist()
        return self.__left

    def getRight(self):
        self.__right = np.asarray(self.__right).reshape(10, -1)
        self.__right = self.__right.T
        self.__right = self.__right.tolist()
        return self.__right
    # 나중에 데이터를 미리 저장하든가...

    def getGraph(self):
        G_l = nx.DiGraph()
        G_r = nx.DiGraph()
        G_l.add_nodes_from(self.__graph_node_l)
        G_r.add_nodes_from(self.__graph_node_r)
        l = [ 4.94, 2.2803508501982765, 0.0, 0.0, 2.280350850198276, 0.0, 4.404543109109047, 1.9723082923316022, 1.9416487838947603]
        r = [10.420172743289815, 10.420172743289815, 2.280350850198277, 0.0, 2.280350850198276, 4.418144406874903, 0.0, 1.9723082923316022, 0.0]
        for index in range(9):
            G_l.add_edge(self.__graph_node_l[index], self.__graph_node_l[index + 1], length=l[index])
            G_l.add_edge(self.__graph_node_r[index], self.__graph_node_r[index + 1], length=r[index])
        return G_l, G_r


class out_toedGait:
    __left=[];
    __right=[];
    __graph_node_l = []
    __graph_node_r = []

    def __init__(self):
        self.__left = [0.00,  0.16,  0.16,  0.16,  0.00,  0.38,  0.29,  4.29,  6.91,  7.42,  7.96,  7.49,  0.00,  0.29,  0.22,  0.22,  0.00,  2.27,  1.44,  7.62,  11.53,  11.24,  12.07,  11.93,  0.00,  0.69,  0.56,  0.73,  0.00,  3.82,  4.42,  9.76,  12.33,  11.49,  12.24,  12.36,  0.00,  2.02,  1.91,  2.22,  0.00,  4.51,  6.02,  10.38,  12.00,  11.13,  11.56,  11.89,  0.00,  4.47,  4.22,  4.56,  0.00,  5.16,  7.09,  10.62,  10.84,  9.60,  9.51,  10.64,  0.00,  7.40,  6.69,  6.91,  0.00,  5.60,  7.69,  10.29,  8.71,  6.78,  6.58,  8.24,  0.00,  10.07,  9.04,  9.31,  0.04,  5.42,  6.38,  8.07,  4.76,  2.87,  2.84,  4.09,  0.00,  11.31,  6.56,  8.76,  0.40,  4.04,  2.27,  3.44,  1.51,  0.64,  0.71,  1.09,  0.00,  9.33,  1.53,  3.58,  0.11,  1.36,  0.22,  0.60,  0.22,  0.18,  0.20,  0.18,  0.00,  3.87,  0.13,  0.58,  0.04,  0.18,  0.00,  0.04,  0.00,  0.00,  0.00,  0.00]
        self.__right =  [0.02,  0.00,  0.02,  0.02,  0.02,  0.84,  0.47,  2.96,  5.02,  5.44,  5.24,  5.38,  0.00,  0.00,  0.00,  0.00,  0.00,  2.44,  1.11,  5.02,  9.56,  9.84,  9.58,  9.80,  0.00,  0.00,  0.00,  0.00,  0.00,  5.18,  3.11,  7.64,  12.16,  12.09,  11.67,  12.31,  0.00,  0.00,  0.00,  0.00,  0.00,  7.40,  5.31,  9.38,  12.29,  11.98,  11.42,  12.18,  0.00,  0.00,  0.00,  0.00,  0.00,  8.44,  6.89,  9.56,  11.16,  10.64,  10.16,  11.13,  0.98,  0.00,  1.11,  0.82,  0.62,  7.96,  6.02,  7.64,  7.49,  6.64,  6.24,  7.38,  2.73,  0.00,  3.27,  2.40,  1.69,  6.27,  2.49,  3.36,  2.82,  2.31,  2.22,  2.71,  6.22,  0.00,  7.20,  4.82,  3.24,  3.76,  0.64,  0.84,  0.64,  0.60,  0.58,  0.64,  7.98,  0.00,  8.71,  5.24,  3.49,  1.58,  0.22,  0.27,  0.36,  0.33,  0.31,  0.40,  6.64,  0.00,  5.53,  2.76,  1.82,  0.33,  0.20,  0.24,  0.31,  0.29,  0.29,  0.36]
        self.__graph_node_l = [0, 7, 6, 6, 7, 5, 5, 4, 2, 2, 2, 2]
        self.__graph_node_r = [8, 0, 8, 8, 8, 5, 5, 4, 4, 4, 4, 4]


    def getLeft(self):
        self.__left = np.asarray(self.__left).reshape(10, -1)
        self.__left = self.__left.T
        self.__left = self.__left.tolist()
        return self.__left

    def getRight(self):
        self.__right = np.asarray(self.__right).reshape(10, -1)
        self.__right = self.__right.T
        self.__right = self.__right.tolist()
        return self.__right

    def getGraph(self):
        G_l = nx.DiGraph()
        G_r = nx.DiGraph()
        G_l.add_nodes_from(self.__graph_node_l)
        G_r.add_nodes_from(self.__graph_node_r)
        l = [10.511898020814318, 2.2803508501982765, 0.0, 2.2803508501982765, 3.224903099319421, 0.0, 4.404543109109047, 3.862641583165594, 0.0]
        r = [16.32329623574846, 16.32329623574846, 0.0, 0.0, 9.751410154434076, 0.0, 4.418144406874903, 0.0, 0.0]

        for index in range(9):
            G_l.add_edge(self.__graph_node_l[index], self.__graph_node_l[index + 1], length=l[index])
            G_l.add_edge(self.__graph_node_r[index], self.__graph_node_r[index + 1], length=r[index])
        return G_l, G_r

class in_toedGait:
    __left=[];
    __right=[];
    __graph_node_l = []
    __graph_node_r = []

    def __init__(self):
        self.__left = [0.00, 0.16, 0.16, 0.16, 0.00, 0.38, 0.29, 4.29, 6.91, 7.42, 7.96, 7.49, 0.00, 0.29, 0.22, 0.22,
                       0.00, 2.27, 1.44, 7.62, 11.53, 11.24, 12.07, 11.93, 0.00, 0.69, 0.56, 0.73, 0.00, 3.82, 4.42,
                       9.76, 12.33, 11.49, 12.24, 12.36, 0.00, 2.02, 1.91, 2.22, 0.00, 4.51, 6.02, 10.38, 12.00, 11.13,
                       11.56, 11.89, 0.00, 4.47, 4.22, 4.56, 0.00, 5.16, 7.09, 10.62, 10.84, 9.60, 9.51, 10.64, 0.00,
                       7.40, 6.69, 6.91, 0.00, 5.60, 7.69, 10.29, 8.71, 6.78, 6.58, 8.24, 0.00, 10.07, 9.04, 9.31, 0.04,
                       5.42, 6.38, 8.07, 4.76, 2.87, 2.84, 4.09, 0.00, 11.31, 6.56, 8.76, 0.40, 4.04, 2.27, 3.44, 1.51,
                       0.64, 0.71, 1.09, 0.00, 9.33, 1.53, 3.58, 0.11, 1.36, 0.22, 0.60, 0.22, 0.18, 0.20, 0.18, 0.00,
                       3.87, 0.13, 0.58, 0.04, 0.18, 0.00, 0.04, 0.00, 0.00, 0.00, 0.00]
        self.__right = [0.02, 0.00, 0.02, 0.02, 0.02, 0.84, 0.47, 2.96, 5.02, 5.44, 5.24, 5.38, 0.00, 0.00, 0.00, 0.00,
                        0.00, 2.44, 1.11, 5.02, 9.56, 9.84, 9.58, 9.80, 0.00, 0.00, 0.00, 0.00, 0.00, 5.18, 3.11, 7.64,
                        12.16, 12.09, 11.67, 12.31, 0.00, 0.00, 0.00, 0.00, 0.00, 7.40, 5.31, 9.38, 12.29, 11.98, 11.42,
                        12.18, 0.00, 0.00, 0.00, 0.00, 0.00, 8.44, 6.89, 9.56, 11.16, 10.64, 10.16, 11.13, 0.98, 0.00,
                        1.11, 0.82, 0.62, 7.96, 6.02, 7.64, 7.49, 6.64, 6.24, 7.38, 2.73, 0.00, 3.27, 2.40, 1.69, 6.27,
                        2.49, 3.36, 2.82, 2.31, 2.22, 2.71, 6.22, 0.00, 7.20, 4.82, 3.24, 3.76, 0.64, 0.84, 0.64, 0.60,
                        0.58, 0.64, 7.98, 0.00, 8.71, 5.24, 3.49, 1.58, 0.22, 0.27, 0.36, 0.33, 0.31, 0.40, 6.64, 0.00,
                        5.53, 2.76, 1.82, 0.33, 0.20, 0.24, 0.31, 0.29, 0.29, 0.36]
        self.__graph_node_l = [11, 8,9,9,6,6,2,0,0,1]
        self.__graph_node_r = [11, 8,9,9,6,6,2,0,0,1]

    def getLeft(self):
        self.__left = np.asarray(self.__left).reshape(10, -1)
        self.__left = self.__left.T
        self.__left = self.__left.tolist()
        return self.__left

    def getRight(self):
        self.__right = np.asarray(self.__right).reshape(10, -1)
        self.__right = self.__right.T
        self.__right = self.__right.tolist()
        return self.__right

    def getGraph(self):
        G_l = nx.DiGraph()
        G_r = nx.DiGraph()
        G_l.add_nodes_from(self.__graph_node_l)
        G_r.add_nodes_from(self.__graph_node_r)
        l = [1.8439088914585775, 2.2472205054244228, 0.0, 6.412487816752559, 0.0, 7.375635565834311, 1.9235384061671343, 0.0, 2.7892651361962733]
        r = [1.6970562748477143, 2.1023796041628637, 0.0, 6.400781202322104, 0.0, 7.334848328356901, 1.9235384061671341, 0.0, 2.7892651361962733]


        for index in range(9):
            G_l.add_edge(self.__graph_node_l[index], self.__graph_node_l[index + 1], length=l[index])
            G_l.add_edge(self.__graph_node_r[index], self.__graph_node_r[index + 1], length=r[index])
        return G_l, G_r

class craneGait:
    __left=[];
    __right=[];
    __graph_node_l = []
    __graph_node_r = []

    def __init__(self):
        self.__left = [0.00,  0.16,  0.16,  0.16,  0.00,  0.38,  0.29,  4.29,  6.91,  7.42,  7.96,  7.49,  0.00,  0.29,  0.22,  0.22,  0.00,  2.27,  1.44,  7.62,  11.53,  11.24,  12.07,  11.93,  0.00,  0.69,  0.56,  0.73,  0.00,  3.82,  4.42,  9.76,  12.33,  11.49,  12.24,  12.36,  0.00,  2.02,  1.91,  2.22,  0.00,  4.51,  6.02,  10.38,  12.00,  11.13,  11.56,  11.89,  0.00,  4.47,  4.22,  4.56,  0.00,  5.16,  7.09,  10.62,  10.84,  9.60,  9.51,  10.64,  0.00,  7.40,  6.69,  6.91,  0.00,  5.60,  7.69,  10.29,  8.71,  6.78,  6.58,  8.24,  0.00,  10.07,  9.04,  9.31,  0.04,  5.42,  6.38,  8.07,  4.76,  2.87,  2.84,  4.09,  0.00,  11.31,  6.56,  8.76,  0.40,  4.04,  2.27,  3.44,  1.51,  0.64,  0.71,  1.09,  0.00,  9.33,  1.53,  3.58,  0.11,  1.36,  0.22,  0.60,  0.22,  0.18,  0.20,  0.18,  0.00,  3.87,  0.13,  0.58,  0.04,  0.18,  0.00,  0.04,  0.00,  0.00,  0.00,  0.00]
        self.__right =  [0.02,  0.00,  0.02,  0.02,  0.02,  0.84,  0.47,  2.96,  5.02,  5.44,  5.24,  5.38,  0.00,  0.00,  0.00,  0.00,  0.00,  2.44,  1.11,  5.02,  9.56,  9.84,  9.58,  9.80,  0.00,  0.00,  0.00,  0.00,  0.00,  5.18,  3.11,  7.64,  12.16,  12.09,  11.67,  12.31,  0.00,  0.00,  0.00,  0.00,  0.00,  7.40,  5.31,  9.38,  12.29,  11.98,  11.42,  12.18,  0.00,  0.00,  0.00,  0.00,  0.00,  8.44,  6.89,  9.56,  11.16,  10.64,  10.16,  11.13,  0.98,  0.00,  1.11,  0.82,  0.62,  7.96,  6.02,  7.64,  7.49,  6.64,  6.24,  7.38,  2.73,  0.00,  3.27,  2.40,  1.69,  6.27,  2.49,  3.36,  2.82,  2.31,  2.22,  2.71,  6.22,  0.00,  7.20,  4.82,  3.24,  3.76,  0.64,  0.84,  0.64,  0.60,  0.58,  0.64,  7.98,  0.00,  8.71,  5.24,  3.49,  1.58,  0.22,  0.27,  0.36,  0.33,  0.31,  0.40,  6.64,  0.00,  5.53,  2.76,  1.82,  0.33,  0.20,  0.24,  0.31,  0.29,  0.29,  0.36]
        self.__graph_node_l = [1,1,0,0, 2, 2, 3, 5, 7, 9]
        self.__graph_node_r = [1,1,0,0, 2, 2, 3, 5, 7, 9]

    def getLeft(self):
        self.__left = np.asarray(self.__left).reshape(10, -1)
        self.__left = self.__left.T
        self.__left = self.__left.tolist()
        return self.__left

    def getRight(self):
        self.__right = np.asarray(self.__right).reshape(10, -1)
        self.__right = self.__right.T
        self.__right = self.__right.tolist()
        return self.__right

    def getGraph(self):
        G_l = nx.DiGraph()
        G_r = nx.DiGraph()
        G_l.add_nodes_from(self.__graph_node_l)
        G_r.add_nodes_from(self.__graph_node_r)
        l = [0.0, 2.7892651361962733, 0.0, 1.9235384061671343, 0.0, 1.9416487838947603, 5.60446250768082, 3.224903099319421, 4.9396356140913875]
        r = [0.0, 2.7892651361962733, 0.0, 1.9235384061671341, 0.0, 1.9416487838947603, 5.554277630799525, 3.224903099319421, 4.838388161361178]

        for index in range(9):
            G_l.add_edge(self.__graph_node_l[index], self.__graph_node_l[index + 1], length=l[index])
            G_l.add_edge(self.__graph_node_r[index], self.__graph_node_r[index + 1], length=r[index])
        return G_l, G_r

class elevenGait:
    __left = [];
    __right = [];
    __graph_node_l = []
    __graph_node_r = []

    def __init__(self):
        self.__left = [0.00,  0.16,  0.16,  0.16,  0.00,  0.38,  0.29,  4.29,  6.91,  7.42,  7.96,  7.49,  0.00,  0.29,  0.22,  0.22,  0.00,  2.27,  1.44,  7.62,  11.53,  11.24,  12.07,  11.93,  0.00,  0.69,  0.56,  0.73,  0.00,  3.82,  4.42,  9.76,  12.33,  11.49,  12.24,  12.36,  0.00,  2.02,  1.91,  2.22,  0.00,  4.51,  6.02,  10.38,  12.00,  11.13,  11.56,  11.89,  0.00,  4.47,  4.22,  4.56,  0.00,  5.16,  7.09,  10.62,  10.84,  9.60,  9.51,  10.64,  0.00,  7.40,  6.69,  6.91,  0.00,  5.60,  7.69,  10.29,  8.71,  6.78,  6.58,  8.24,  0.00,  10.07,  9.04,  9.31,  0.04,  5.42,  6.38,  8.07,  4.76,  2.87,  2.84,  4.09,  0.00,  11.31,  6.56,  8.76,  0.40,  4.04,  2.27,  3.44,  1.51,  0.64,  0.71,  1.09,  0.00,  9.33,  1.53,  3.58,  0.11,  1.36,  0.22,  0.60,  0.22,  0.18,  0.20,  0.18,  0.00,  3.87,  0.13,  0.58,  0.04,  0.18,  0.00,  0.04,  0.00,  0.00,  0.00,  0.00]
        self.__right =  [0.02,  0.00,  0.02,  0.02,  0.02,  0.84,  0.47,  2.96,  5.02,  5.44,  5.24,  5.38,  0.00,  0.00,  0.00,  0.00,  0.00,  2.44,  1.11,  5.02,  9.56,  9.84,  9.58,  9.80,  0.00,  0.00,  0.00,  0.00,  0.00,  5.18,  3.11,  7.64,  12.16,  12.09,  11.67,  12.31,  0.00,  0.00,  0.00,  0.00,  0.00,  7.40,  5.31,  9.38,  12.29,  11.98,  11.42,  12.18,  0.00,  0.00,  0.00,  0.00,  0.00,  8.44,  6.89,  9.56,  11.16,  10.64,  10.16,  11.13,  0.98,  0.00,  1.11,  0.82,  0.62,  7.96,  6.02,  7.64,  7.49,  6.64,  6.24,  7.38,  2.73,  0.00,  3.27,  2.40,  1.69,  6.27,  2.49,  3.36,  2.82,  2.31,  2.22,  2.71,  6.22,  0.00,  7.20,  4.82,  3.24,  3.76,  0.64,  0.84,  0.64,  0.60,  0.58,  0.64,  7.98,  0.00,  8.71,  5.24,  3.49,  1.58,  0.22,  0.27,  0.36,  0.33,  0.31,  0.40,  6.64,  0.00,  5.53,  2.76,  1.82,  0.33,  0.20,  0.24,  0.31,  0.29,  0.29,  0.36]
        self.__graph_node_l = [11, 10, 9, 6, 6, 2, 0, 0, 1, 1]
        self.__graph_node_r = [11, 10, 9, 6, 6, 2, 0, 0, 1, 1]

    def getLeft(self):
        self.__left = np.asarray(self.__left).reshape(10, -1)
        self.__left = self.__left.T
        self.__left = self.__left.tolist()
        return self.__left

    def getRight(self):
        self.__right = np.asarray(self.__right).reshape(10, -1)
        self.__right = self.__right.T
        self.__right = self.__right.tolist()
        return self.__right

    def getGraph(self):
        G_l = nx.DiGraph()
        G_r = nx.DiGraph()
        G_l.add_nodes_from(self.__graph_node_l)
        G_r.add_nodes_from(self.__graph_node_r)
        l = [1.6643316977093239, 2.024845673131659, 6.412487816752559, 0.0, 7.375635565834311, 1.9235384061671343, 0.0, 2.7892651361962733, 0.0]
        r = [1.7804493814764852, 2.202271554554524, 6.400781202322104, 0.0, 7.334848328356901, 1.9235384061671341, 0.0, 2.7892651361962733, 0.0]

        for index in range(9):
            G_l.add_edge(self.__graph_node_l[index], self.__graph_node_l[index + 1], length=l[index])
            G_l.add_edge(self.__graph_node_r[index], self.__graph_node_r[index + 1], length=r[index])
        return G_l, G_r

class diseasePrediction:
    __comment=["평균적으로 올바르게 걷는 습관을 가지고 있습니다. 이 좋은 습관, 유지하셔서 건강지키세요!*^^*",
               "평균적으로 팔자걸음에 가까운 걸음걸이 습관을 가지고 있습니다. 해당 걸음걸이를 계속 유지하실 경우 허리를 자꾸 뒤로 젖히게 되어 체중이 바깥쪽으로 쏠리면서 요통, 허리디스크, 퇴행성 관절염을 유발할 수 있습니다.",
               "평균적으로 안짱걸음에 가까운 걸음걸이 습관을 가지고 있습니다. 해당 걸음걸이를 계속 유지하시는 경우 고관절염이 생길 수 있고 무릎인대가 손상될 수 있습니다.",
               "평균적으로 학다리걸음에 가까운 걸음걸이 습관을 가지고 있습니다. 해당 걸음걸이를 계속 유지하시는 경우 무릎을 굽히지 않아 계속적으로 무릎에 충격이 가며 연골 연화증이 발생할 수 있습니다.",
               "평균적으로 일자걸음에 가까운 걸음걸이 습관을 가지고 있습니다. 해당 걸음걸이를 계속 유지하시는 경우 무릎 안쪽에 체중이 부하되어 내측 관절에 염증이 생기거나 변형이 유발될 수 있습니다."];
    def getComment(self, index):
        return self.__comment[index]
